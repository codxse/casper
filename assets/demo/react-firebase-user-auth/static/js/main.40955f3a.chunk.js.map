{"version":3,"sources":["validator.ts","firebase.ts","components/Login.tsx","components/Signup.tsx","components/Welcome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["validateEmail","email","test","validatePassword","password","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Persistence","Auth","createUserWithEmailAndPassword","callback","a","res","undefined","signInWithEmailAndPassword","rememberMe","persistence","LOCAL","SESSION","setPersistence","auth","provider","GoogleAuthProvider","addScope","signInWithGoogle","signInWithRedirect","Login","props","useState","setEmail","isEmailValid","setPassword","isPasswordValid","setRememberMe","loading","setLoading","error","setError","className","role","message","htmlFor","type","id","aria-describedby","placeholder","value","onChange","event","preventDefault","text","target","checked","disabled","onClick","response","err","setSignUp","Signup","setSignIn","Welcome","user","displayName","signOut","then","window","location","reload","App","setUser","path","setPath","useEffect","unsubscribe","onAuthStateChanged","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.40955f3a.chunk.js","sourcesContent":["export const validateEmail = (email: string = \"\"): boolean => {\n  return /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,})+$/.test(email);\n};\n\nexport const validatePassword = (password: string = \"\"): boolean => {\n  return /^[^%]{6,}$/.test(password);\n};\n","import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCRAX8LunfO4aQgRXyWiqwzaZPGQbe7pmQ\",\n  authDomain: \"remote-config-demo-3eb4c.firebaseapp.com\",\n  databaseURL: \"https://remote-config-demo-3eb4c.firebaseio.com\",\n  projectId: \"remote-config-demo-3eb4c\",\n  storageBucket: \"remote-config-demo-3eb4c.appspot.com\",\n  messagingSenderId: \"232509884210\",\n  appId: \"1:232509884210:web:450c48e117af09a89d792b\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport type UserCredential = firebase.auth.UserCredential;\nexport const Persistence = firebase.auth.Auth.Persistence;\nexport interface User extends firebase.User {};\n\n\nexport const createUserWithEmailAndPassword = async (email: string, password: string, callback: (response?: UserCredential, err?: Error) => void): Promise<void> => {\n  try {\n    const res: UserCredential = await firebase.auth().createUserWithEmailAndPassword(email, password);\n    callback(res);\n  } catch (e) {\n    callback(undefined, e);\n  }\n};\n\nexport const signInWithEmailAndPassword =  async (email: string, password: string, rememberMe: boolean, callback: (response?: UserCredential, err?: Error) => void): Promise<void> => {\n  const persistence = rememberMe ? Persistence.LOCAL : Persistence.SESSION;\n  try {\n    await firebase.auth().setPersistence(persistence);\n    const res: UserCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\n    callback(res);\n  } catch (e) {\n    callback(undefined, e);\n  }\n};\n\nexport const auth = firebase.auth();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.addScope('');\n\nexport const signInWithGoogle = async (callback: (err?: Error) => void): Promise<void> => {\n  try {\n    await firebase.auth().signInWithRedirect(provider);\n    callback();\n  } catch (e) {\n    callback(e);\n  }\n};\n\n\n","import React, { useState } from \"react\";\nimport { validateEmail, validatePassword } from '../validator';\nimport { signInWithEmailAndPassword, signInWithGoogle } from '../firebase';\n\nexport const Login = (props: { setSignUp: VoidFunction }): JSX.Element => {\n  const [email, setEmail] = useState<string>(\"\");\n  const isEmailValid = validateEmail(email);\n  const [password, setPassword] = useState<string>(\"\");\n  const isPasswordValid = validatePassword(password);\n  const [rememberMe, setRememberMe] = useState<boolean>(true);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  return (\n    <>\n      { error ?\n        <div className=\"alert alert-danger\" role=\"alert\">\n          { error?.message }\n        </div> : null }\n\n      <div className=\"border rounded shadow-sm p-3 mb-5 bg-white rounded\">\n        <form className=\"text-left\">\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Email address</label>\n            <input\n              type=\"email\"\n              className=\"form-control form-control-lg\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"eg. example@email.com\"\n              value={email}\n              onChange={(event) => {\n                event.preventDefault();\n                const text = event.target.value;\n                setEmail(text);\n              }}\n            />\n            { !isEmailValid ? <small id=\"emailHelpLogin\" className=\"form-text text-danger\">Please enter proper email address</small> : null }\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputPassword1\">Password</label>\n            <input\n              type=\"password\"\n              className=\"form-control form-control-lg\"\n              id=\"exampleInputPassword1\"\n              placeholder=\"**********\"\n              value={password}\n              onChange={(event) => {\n                event.preventDefault();\n                const text = event.target.value;\n                setPassword(text);\n              }}\n            />\n            { !isPasswordValid ? <small id=\"passwordHelpLogin\" className=\"form-text text-danger\">Password length must greater than 6 characters long</small> : null }\n          </div>\n          <div className=\"form-group form-check\">\n            <input\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              id=\"exampleCheck1\"\n              checked={rememberMe}\n              onChange={(event) => {\n                setRememberMe(!rememberMe);\n              }}\n            />\n            <label className=\"form-check-label\" htmlFor=\"exampleCheck1\">Remember Me</label>\n          </div>\n          <button\n            disabled={!isEmailValid || !isPasswordValid}\n            type=\"button\"\n            className=\"btn btn-primary btn-lg btn-block\"\n            onClick={(event) => {\n              setLoading(true);\n              setError(null);\n              signInWithEmailAndPassword(email, password, rememberMe, (response, err) => {\n                if (response) setLoading(false);\n                if (err) {\n                  setLoading(false);\n                  setError(err);\n                }\n              });\n            }}\n          >{ loading ? \"Loading...\" : \"Sign In\"}</button>\n        </form>\n        <div className=\"my-3\"><em>Or</em></div>\n        <button\n          type=\"button\"\n          className=\"btn btn-link btn-lg btn-block mb-3\"\n          onClick={(event) => {\n            signInWithGoogle((err) => {\n              if (err) setError(err);\n            });\n          }}\n        >Login with Google</button>\n        <div className=\"border-top my-3\" />\n        <span>Don't have an account yet? <button className=\"btn btn-light btn-sm\" onClick={props.setSignUp}>Register here</button></span>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { validateEmail, validatePassword } from '../validator';\nimport { createUserWithEmailAndPassword } from '../firebase';\n\nexport const Signup = (props: { setSignIn: VoidFunction}): JSX.Element => {\n  const [email, setEmail] = useState<string>(\"\");\n  const isEmailValid = validateEmail(email);\n  const [password, setPassword] = useState<string>(\"\");\n  const isPasswordValid = validatePassword(password);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  return (\n    <>\n      { error ?\n        <div className=\"alert alert-danger\" role=\"alert\">\n          { error?.message }\n        </div> : null }\n\n      <div className=\"border rounded shadow-sm p-3 mb-5 bg-white rounded\">\n        <form className=\"text-left\">\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputEmail1\">Email address</label>\n            <input\n              type=\"email\"\n              className=\"form-control form-control-lg\"\n              id=\"exampleInputEmail1\"\n              aria-describedby=\"emailHelp\"\n              placeholder=\"eg. example@email.com\"\n              value={email}\n              onChange={(event) => {\n                event.preventDefault();\n                const text = event.target.value;\n                setEmail(text);\n              }}\n            />\n            { !isEmailValid ? <small id=\"emailHelpRegister\" className=\"form-text text-danger\">Please enter valid email address</small> : null }\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"exampleInputPassword1\">Password</label>\n            <input\n              type=\"password\"\n              className=\"form-control form-control-lg\"\n              id=\"exampleInputPassword1\"\n              placeholder={\"*********\"}\n              value={password}\n              onChange={(event) => {\n                event.preventDefault();\n                const text = event.target.value;\n                setPassword(text);\n              }}\n            />\n            { !isPasswordValid ? <small id=\"passwordHelpRegister\" className=\"form-text text-danger\">We'll never share your email with anyone else.</small> : null }\n          </div>\n          <button\n            disabled={!isPasswordValid || !isEmailValid}\n            type=\"button\"\n            className=\"btn btn-primary btn-lg btn-block\"\n            onClick={(event) => {\n              setError(null);\n              setLoading(true);\n              createUserWithEmailAndPassword(email, password, (res, err) => {\n                if (res) setLoading(false);\n                if (err) {\n                  setLoading(false);\n                  setError(err);\n                }\n              });\n            }}\n          >{ loading ? \"Loading...\" : \"Sign Up\"}</button>\n        </form>\n        <div className=\"border-top my-3\" />\n        <span>Have an account? <button className=\"btn btn-light btn-sm\" onClick={props.setSignIn}>Login here</button></span>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { auth, User } from '../firebase';\n\nexport const Welcome = (props: {user: User}): JSX.Element => {\n  return (\n    <div className=\"jumbotron text-left\">\n      <h1 className=\"display-3\">Hello,</h1>\n      <h2 className=\"display-4\">{props.user.displayName || props.user.email}</h2>\n      <p className=\"lead\">This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or\n        information.</p>\n      <hr className=\"my-4\" />\n      <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>\n      <button\n        className=\"btn btn btn-outline-danger\"\n        onClick={(event) => {\n          auth.signOut().then(() => {\n            window.location.reload();\n          });\n        }}\n      >Sign Out</button>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { Login } from './components/Login';\nimport { Signup } from './components/Signup';\nimport { Welcome } from './components/Welcome';\nimport { auth, User } from './firebase';\n\ntype Path = (\"welcome\" | \"sign-up\" | \"sign-in\")\n\nfunction App() {\n  const [user, setUser] = useState<User | null>(null);\n  const [path, setPath] = useState<Path>(\"sign-in\");\n  const setSignUpPath = () => setPath(\"sign-up\");\n  const setSignInPath = () => setPath(\"sign-in\");\n  const [loading, setLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user: User | null) => {\n      if (user) {\n        setUser(user);\n        setPath(\"welcome\");\n      }\n      setLoading(false);\n    });\n    return () => {\n      unsubscribe();\n    };\n  });\n\n  if (loading) {\n    return (\n      <div className=\"App\">\n        <div className=\"container mt-5\">\n          <div className=\"row justify-content-md-center\">\n            <h1>Loading...</h1>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container mt-5\">\n        <div className=\"row justify-content-md-center\">\n          { path === \"sign-in\" ?\n            <div className=\"col-sm-4\">\n              <Login setSignUp={setSignUpPath}/>\n            </div> : null }\n          { path === \"sign-up\" ?\n            <div className=\"col-sm-4\">\n              <Signup setSignIn={setSignInPath}/>\n            </div> : null }\n          { user ?\n            <div className=\"col-sm-8\">\n              <Welcome user={user}/>\n            </div> : null }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}